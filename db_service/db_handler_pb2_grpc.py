# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import db_service.db_handler_pb2 as db__handler__pb2


class DBServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.check_user_exists = channel.unary_unary(
                '/db_service.DBService/check_user_exists',
                request_serializer=db__handler__pb2.CheckUserExistsRequest.SerializeToString,
                response_deserializer=db__handler__pb2.CheckUserExistsResponse.FromString,
                )
        self.get_uuid = channel.unary_unary(
                '/db_service.DBService/get_uuid',
                request_serializer=db__handler__pb2.GetUUIDRequest.SerializeToString,
                response_deserializer=db__handler__pb2.GetUUIDResponse.FromString,
                )
        self.set_access_data = channel.unary_unary(
                '/db_service.DBService/set_access_data',
                request_serializer=db__handler__pb2.SetAccessDataRequest.SerializeToString,
                response_deserializer=db__handler__pb2.SetAccessDataResponse.FromString,
                )
        self.set_new_user = channel.unary_unary(
                '/db_service.DBService/set_new_user',
                request_serializer=db__handler__pb2.SetNewUserRequest.SerializeToString,
                response_deserializer=db__handler__pb2.SetNewUserResponse.FromString,
                )
        self.get_access_token_by_uuid = channel.unary_unary(
                '/db_service.DBService/get_access_token_by_uuid',
                request_serializer=db__handler__pb2.GetAccessTokenByUUIDRequest.SerializeToString,
                response_deserializer=db__handler__pb2.GetAccessTokenByUUIDResponse.FromString,
                )
        self.set_avatar = channel.unary_unary(
                '/db_service.DBService/set_avatar',
                request_serializer=db__handler__pb2.SetAvatarRequest.SerializeToString,
                response_deserializer=db__handler__pb2.SetAvatarResponse.FromString,
                )
        self.get_avatar = channel.unary_unary(
                '/db_service.DBService/get_avatar',
                request_serializer=db__handler__pb2.GetAvatarRequest.SerializeToString,
                response_deserializer=db__handler__pb2.GetAvatarResponse.FromString,
                )


class DBServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def check_user_exists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_uuid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_access_data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_new_user(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_access_token_by_uuid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_avatar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_avatar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DBServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'check_user_exists': grpc.unary_unary_rpc_method_handler(
                    servicer.check_user_exists,
                    request_deserializer=db__handler__pb2.CheckUserExistsRequest.FromString,
                    response_serializer=db__handler__pb2.CheckUserExistsResponse.SerializeToString,
            ),
            'get_uuid': grpc.unary_unary_rpc_method_handler(
                    servicer.get_uuid,
                    request_deserializer=db__handler__pb2.GetUUIDRequest.FromString,
                    response_serializer=db__handler__pb2.GetUUIDResponse.SerializeToString,
            ),
            'set_access_data': grpc.unary_unary_rpc_method_handler(
                    servicer.set_access_data,
                    request_deserializer=db__handler__pb2.SetAccessDataRequest.FromString,
                    response_serializer=db__handler__pb2.SetAccessDataResponse.SerializeToString,
            ),
            'set_new_user': grpc.unary_unary_rpc_method_handler(
                    servicer.set_new_user,
                    request_deserializer=db__handler__pb2.SetNewUserRequest.FromString,
                    response_serializer=db__handler__pb2.SetNewUserResponse.SerializeToString,
            ),
            'get_access_token_by_uuid': grpc.unary_unary_rpc_method_handler(
                    servicer.get_access_token_by_uuid,
                    request_deserializer=db__handler__pb2.GetAccessTokenByUUIDRequest.FromString,
                    response_serializer=db__handler__pb2.GetAccessTokenByUUIDResponse.SerializeToString,
            ),
            'set_avatar': grpc.unary_unary_rpc_method_handler(
                    servicer.set_avatar,
                    request_deserializer=db__handler__pb2.SetAvatarRequest.FromString,
                    response_serializer=db__handler__pb2.SetAvatarResponse.SerializeToString,
            ),
            'get_avatar': grpc.unary_unary_rpc_method_handler(
                    servicer.get_avatar,
                    request_deserializer=db__handler__pb2.GetAvatarRequest.FromString,
                    response_serializer=db__handler__pb2.GetAvatarResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'db_service.DBService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DBService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def check_user_exists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/db_service.DBService/check_user_exists',
            db__handler__pb2.CheckUserExistsRequest.SerializeToString,
            db__handler__pb2.CheckUserExistsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_uuid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/db_service.DBService/get_uuid',
            db__handler__pb2.GetUUIDRequest.SerializeToString,
            db__handler__pb2.GetUUIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_access_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/db_service.DBService/set_access_data',
            db__handler__pb2.SetAccessDataRequest.SerializeToString,
            db__handler__pb2.SetAccessDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_new_user(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/db_service.DBService/set_new_user',
            db__handler__pb2.SetNewUserRequest.SerializeToString,
            db__handler__pb2.SetNewUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_access_token_by_uuid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/db_service.DBService/get_access_token_by_uuid',
            db__handler__pb2.GetAccessTokenByUUIDRequest.SerializeToString,
            db__handler__pb2.GetAccessTokenByUUIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_avatar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/db_service.DBService/set_avatar',
            db__handler__pb2.SetAvatarRequest.SerializeToString,
            db__handler__pb2.SetAvatarResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_avatar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/db_service.DBService/get_avatar',
            db__handler__pb2.GetAvatarRequest.SerializeToString,
            db__handler__pb2.GetAvatarResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
